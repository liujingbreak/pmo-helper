"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
// tslint:disable: no-console
const rxjs_1 = require("rxjs");
const puppeteer_core_1 = tslib_1.__importDefault(require("puppeteer-core"));
// import * as jira from './jira';
const jira_1 = require("./jira");
const operators_1 = require("rxjs/operators");
const jsYaml = tslib_1.__importStar(require("js-yaml"));
const log = require('log4js').getLogger('jira-helper');
const path_1 = tslib_1.__importDefault(require("path"));
const __api_1 = tslib_1.__importDefault(require("__api"));
const fs_1 = tslib_1.__importDefault(require("fs"));
const lodash_1 = tslib_1.__importDefault(require("lodash"));
// import os from 'os';
function login() {
    return tslib_1.__awaiter(this, void 0, void 0, function* () {
        const browser = yield launch();
        const pages = yield browser.pages();
        yield pages[0].goto('https://trello.com', { timeout: 0, waitUntil: 'domcontentloaded' });
    });
}
exports.login = login;
function launch(headless = false) {
    return tslib_1.__awaiter(this, void 0, void 0, function* () {
        let executablePath;
        switch (process.platform) {
            // Refer to https://chromium.googlesource.com/chromium/src/+/master/docs/user_data_dir.md#Mac-OS-X
            case 'darwin':
                executablePath = '/Applications/Google Chrome.app/Contents/MacOS/Google Chrome';
                break;
            case 'win32':
                executablePath = path_1.default.resolve(process.env['ProgramFiles(x86)'] || 'c:/Program Files (x86)', 'Google/Chrome/Application/chrome.exe');
                break;
            default:
                const msg = 'jira-helper does not support this platform ' + process.platform;
                log.error(msg);
                throw new Error(msg);
        }
        if (__api_1.default.argv.headless === true) {
            log.info('Enable headless mode');
            headless = true;
        }
        const browser = yield puppeteer_core_1.default.launch({
            headless,
            executablePath: executablePath,
            userDataDir: process.cwd() + '/dist/puppeteer-temp',
            ignoreHTTPSErrors: true,
            defaultViewport: { width: 1236, height: 768 }
        });
        return browser;
    });
}
function run() {
    return tslib_1.__awaiter(this, void 0, void 0, function* () {
        const browser = yield launch(false);
        const pages = yield browser.pages();
        // const page = await browser.newPage();
        console.time('get page');
        // tslint:disable-next-line: max-line-length
        const url = 'https://trello.com/b/i6yaHbFX/%E8%B4%9D%E7%94%A8%E9%87%91%E8%B4%9D%E5%88%86%E6%9C%9F%E4%BA%A7%E5%93%81%E5%8E%9F%E4%BF%A1%E7%94%A8%E4%BA%8B%E4%B8%9A%E9%83%A8%E5%89%8D%E7%AB%AF%E5%9B%A2%E9%98%9F';
        log.info('GET ' + url);
        yield pages[0].goto(url, { timeout: 0, waitUntil: 'networkidle2' });
        console.log('fetching trello done');
        console.timeEnd('get page');
        const boards = yield listBoards(pages[0]);
        console.log(jsYaml.safeDump(boards));
        yield browser.close();
        console.log('Have a nice day');
    });
}
exports.run = run;
function listBoards(page) {
    return tslib_1.__awaiter(this, void 0, void 0, function* () {
        yield page.waitFor('#board', { visible: true });
        const boards = yield page.$$('#board > .list-wrapper > .list');
        return rxjs_1.from(boards).pipe(operators_1.mergeMap(boardEl => {
            return rxjs_1.forkJoin(rxjs_1.from(boardEl.$('.list-header h2')).pipe(operators_1.mergeMap(bdTitle => rxjs_1.from(bdTitle.getProperty('innerText'))), operators_1.mergeMap(value => rxjs_1.from(value.jsonValue()))), rxjs_1.from(boardEl.$$('.list-card .list-card-title')).pipe(operators_1.mergeMap(cards => rxjs_1.from(cards)), operators_1.mergeMap(card => {
                return rxjs_1.forkJoin(rxjs_1.from(card.$('.card-short-id')).pipe(operators_1.mergeMap(id => id.getProperty('innerText')), operators_1.mergeMap(jh => rxjs_1.from(jh.jsonValue()))), rxjs_1.from(card.getProperty('innerText')).pipe(operators_1.mergeMap(jh => rxjs_1.from(jh.jsonValue()))));
            }), operators_1.map(([shortId, title]) => ({ title, shortId })), operators_1.reduce((cards, card) => {
                cards.push(card);
                return cards;
            }, [])));
        }), operators_1.map(([name, cards]) => {
            log.info(` [ ${name} ] `);
            log.info(cards.map(card => `  - ${card.shortId}: ${card.title}`).join('\n'));
            return { name, cards };
        }), operators_1.reduce((boards, bd) => {
            boards.push(bd);
            return boards;
        }, [])).toPromise();
    });
}
function main() {
    console.log(__api_1.default.argv);
}
exports.main = main;
function loginJira() {
    return tslib_1.__awaiter(this, void 0, void 0, function* () {
        const browser = yield launch(false);
        const pages = yield browser.pages();
        yield pages[0].goto('https://issue.bkjk-inc.com', { timeout: 0, waitUntil: 'domcontentloaded' });
    });
}
exports.loginJira = loginJira;
function listJira(
// tslint:disable-next-line: max-line-length
url = 'https://issue.bkjk-inc.com/issues/?filter=14086&jql=project%20%3D%20BYJ%20AND%20issuetype%20in%20(%E4%BB%BB%E5%8A%A1%2C%20%E6%95%85%E4%BA%8B)%20AND%20resolution%20%3D%20Unresolved%20AND%20fixVersion%20%3D%20%22%E8%B4%9D%E7%94%A8%E9%87%91v1.9%2F910%22%20ORDER%20BY%20key%20DESC%2C%20summary%20DESC%2C%20updated%20DESC') {
    return tslib_1.__awaiter(this, void 0, void 0, function* () {
        const browser = yield launch(false);
        const pages = yield browser.pages();
        yield pages[0].goto(url, { timeout: 0, waitUntil: 'networkidle2' });
        console.log('fetching page done');
        const page = pages[0];
        const table = yield page.$('#issuetable > tbody');
        const keys = yield table.$$('tr');
        const issues = yield Promise.all(keys.map((row) => tslib_1.__awaiter(this, void 0, void 0, function* () {
            const issue = yield row.getProperty('innerText').then(v => v.jsonValue())
                .then((str) => str.split(/\s+/))
                .then(cols => jira_1.columnsToIssue(...cols));
            // log.info(issue);
            return issue;
        })));
        for (const issue of issues) {
            yield page.goto('https://issue.bkjk-inc.com/browse/' + issue.id, { timeout: 0, waitUntil: 'networkidle2' });
            issue.tasks = yield listSubtasks(page, issue.id);
        }
        // keys.map(row => row.getProperties().then(props => Array.from(props.keys()))));
        log.info(jsYaml.safeDump(issues));
        yield browser.close();
        console.log('Have a nice day');
    });
}
exports.listJira = listJira;
function syncJira() {
    return tslib_1.__awaiter(this, void 0, void 0, function* () {
        const browser = yield launch(false);
        const pages = yield browser.pages();
        const issues = jsYaml.load(fs_1.default.readFileSync(__dirname + '/../add-jira.yaml', 'utf8'));
        log.info(issues.length);
        for (const issue of issues) {
            if (!issue.tasks)
                continue;
            log.info('Check issue', issue.id);
            const tasksWithoutId = issue.tasks.filter(task => task.id == null);
            // log.info(tasksWithoutId);
            if (tasksWithoutId.length === 0)
                continue;
            const remoteTasks = yield listSubtasks(pages[0], issue.id);
            issue.ver = yield pages[0].$('#fixfor-val').then(el => el.getProperty('innerText')).then(jh => jh.jsonValue());
            const toAdd = lodash_1.default.differenceBy(tasksWithoutId, remoteTasks, issue => issue.name);
            log.info(toAdd);
            for (const item of toAdd) {
                item.ver = issue.ver;
                yield addSubTask(pages[0], item);
            }
        }
        browser.close();
    });
}
exports.syncJira = syncJira;
function issueDetail() {
    return tslib_1.__awaiter(this, void 0, void 0, function* () {
        const browser = yield launch(false);
        const pages = yield browser.pages();
        const tasks = yield listSubtasks(pages[0], 'BYJ-2141');
        log.info(tasks);
        yield browser.close();
    });
}
exports.issueDetail = issueDetail;
function addSubTask(page, task) {
    return tslib_1.__awaiter(this, void 0, void 0, function* () {
        log.info('adding', task);
        const moreBtn = yield page.$('#opsbar-operations_more');
        if (moreBtn == null)
            throw new Error('#opsbar-operations_more not found in page'); // click 更多
        // log.warn(await moreBtn.getProperty('innerText').then(jh => jh.jsonValue()));
        yield moreBtn.click({ delay: 100 });
        yield page.waitFor('#opsbar-operations_more_drop', { visible: true });
        const menuItems = yield page.$$('#opsbar-operations_more_drop .trigger-label');
        for (const item of menuItems) {
            const text = yield item.getProperty('innerHTML').then(jh => jh.jsonValue());
            if (text === '创建子任务') {
                yield item.click();
                break;
            }
        }
        yield page.waitFor('#create-subtask-dialog', { visible: true });
        const dialog = yield page.$('#create-subtask-dialog');
        if (!dialog)
            throw new Error('Adding issue dialog not found');
        yield dialog.$('input[name=summary]')
            .then(input => input.type(task.name.startsWith('FE ') ? task.name : 'FE - ' + task.name));
        const input = yield dialog.$('#fixVersions-textarea');
        yield input.click();
        yield input.type(task.ver);
        yield page.keyboard.press('Enter');
        yield dialog.$('#description-wiki-edit').then(el => el.click());
        yield page.keyboard.type(task.desc ? task.desc : task.name);
        const labels = yield dialog.$$('.field-group > label');
        const texts = yield Promise.all(labels.map(label => label.getProperty('innerText').then(v => v.jsonValue())));
        const labelMap = {};
        texts.forEach((text, idx) => labelMap[text.split(/[\n\r\t]+/)[0]] = labels[idx]);
        // log.info(Object.keys(labelMap));
        const matchName = /[(（]([0-9.][dhDH]?)[)）]\s*$/.exec(task.name);
        let duration = matchName ? matchName[1] : '0.5d';
        if (!duration.endsWith('d') && !duration.endsWith('h')) {
            duration = duration + 'd';
        }
        const formValues = {
            'Start date': '26/八月/19',
            'End date': '26/九月/19',
            // tslint:disable-next-line: object-literal-key-quotes
            '初始预估': duration,
            剩余的估算: duration,
            经办人: task.assignee || '刘晶'
        };
        for (const name of Object.keys(labelMap)) {
            if (!lodash_1.default.has(formValues, name))
                continue;
            yield labelMap[name].click({ delay: 50 });
            yield new Promise(resolve => setTimeout(resolve, 200));
            yield page.keyboard.type(formValues[name], { delay: 50 });
            if (name === '经办人') {
                yield new Promise(resolve => setTimeout(resolve, 500)); // wait for JIRA searching user
                yield page.keyboard.press('Enter', { delay: 50 });
            }
        }
        yield dialog.$('#create-issue-submit').then(btn => btn.click());
        yield page.waitFor('#create-subtask-dialog', { hidden: true });
        yield new Promise(resolve => setTimeout(resolve, 1000));
    });
}
function listSubtasks(page, issueId) {
    return tslib_1.__awaiter(this, void 0, void 0, function* () {
        yield page.goto('https://issue.bkjk-inc.com/browse/' + issueId, { timeout: 0, waitUntil: 'networkidle2' });
        const tasks = yield page.$$eval('#view-subtasks #issuetable > tbody > tr', (els) => {
            // return els.length;
            return els.map(el => {
                const name = el.querySelector('.stsummary');
                const subtask = {
                    id: el.getAttribute('data-issuekey'),
                    name: name ? name.innerText : '',
                    // state: '',
                    state: el.querySelector('.status').innerText,
                    ver: '',
                    // assignee: ''
                    assignee: el.querySelector('.assignee').innerText
                };
                return subtask;
            });
        });
        return tasks;
    });
}

//# sourceMappingURL=data:application/json;charset=utf8;base64,
