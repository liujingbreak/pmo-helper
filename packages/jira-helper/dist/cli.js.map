{"version":3,"sources":["cli.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAEA,8CAAqF;AAGrF,MAAM,MAAM,GAAiB,CAAC,OAAO,EAAE,iBAAiB,EAAE,EAAE;IAC1D,MAAM,QAAQ,GAAG,OAAO,CAAC,OAAO,CAAC,YAAY,CAAC;SAC7C,WAAW,CAAC,mCAAmC,CAAC;SAChD,MAAM,CAAC,CAAO,IAAY,EAAE,EAAE;QAC7B,iBAAU,CAAC,OAAO,CAAC,IAAI,EAAmB,CAAC,CAAC;QAC5C,kBAAW,EAAE,CAAC;QACb,OAAO,CAAC,qBAAqB,CAAC,CAAC,uBAA0D,EAAE,CAAC;QAC7F,CAAC,wDAAa,QAAQ,GAAC,CAAC,CAAC,KAAK,EAAE,CAAC;IACnC,CAAC,CAAA,CAAC,CAAC;IACH,iBAAiB,CAAC,QAAQ,CAAC,CAAC;IAG5B,MAAM,OAAO,GAAG,OAAO,CAAC,OAAO,CAAC,uBAAuB,CAAC;SACvD,WAAW,CAAC,6CAA6C,CAAC;SAC1D,MAAM,CAAC,YAAY,EAAE,wBAAwB,CAAC;SAC9C,MAAM,CAAC,CAAO,IAAY,EAAE,EAAE;QAC7B,iBAAU,CAAC,OAAO,CAAC,IAAI,EAAmB,CAAC,CAAC;QAC5C,kBAAW,EAAE,CAAC;QACb,OAAO,CAAC,qBAAqB,CAAC,CAAC,uBAA0D,EAAE,CAAC;QAC7F,IAAI,OAAO,CAAC,IAAI,EAAE,CAAC,QAAQ,EAAE;YAC1B,OAAO,CAAC,aAAa,CAAsB,CAAC,cAAc,CAAC,IAAI,CAAC,CAAC;SACnE;QACD,CAAC,wDAAa,QAAQ,GAAC,CAAC,CAAC,IAAI,CAAC,EAAC,QAAQ,EAAE,OAAO,CAAC,IAAI,EAAE,CAAC,QAAQ,EAAC,EAAE,IAAI,CAAC,CAAC;IAC3E,CAAC,CAAA,CAAC,CAAC;IACH,iBAAiB,CAAC,OAAO,CAAC,CAAC;IAE3B,MAAM,OAAO,GAAG,OAAO,CAAC,OAAO,CAAC,uBAAuB,CAAC;SACvD,WAAW,CAAC,wDAAwD;QACnE,0DAA0D,CAAC;SAC5D,MAAM,CAAC,0BAA0B,EAAE,6CAA6C,CAAC;SACjF,MAAM,CAAC,6BAA6B,EAAE,0CAA0C,CAAC;SACjF,MAAM,CAAC,YAAY,EAAE,wBAAwB,CAAC;SAC9C,MAAM,CAAC,CAAO,GAAW,EAAE,EAAE;QAC5B,iBAAU,CAAC,OAAO,CAAC,IAAI,EAAmB,CAAC,CAAC;QAC5C,kBAAW,EAAE,CAAC;QACb,OAAO,CAAC,qBAAqB,CAAC,CAAC,uBAA0D,EAAE,CAAC;QAC7F,IAAI,OAAO,CAAC,IAAI,EAAE,CAAC,QAAQ,EAAE;YAC1B,OAAO,CAAC,aAAa,CAAsB,CAAC,cAAc,CAAC,IAAI,CAAC,CAAC;SACnE;QACD,CAAC,wDAAa,QAAQ,GAAC,CAAC,CAAC,SAAS,CAAC,OAAO,CAAC,IAAI,EAAE,EAAE,GAAG,CAAC,CAAC;IAC1D,CAAC,CAAA,CAAC,CAAC;IACH,iBAAiB,CAAC,OAAO,CAAC,CAAC;AAC7B,CAAC,CAAC;AAEF,kBAAe,MAAM,CAAC","file":"cli.js","sourcesContent":["import {CliExtension , GlobalOptions // , initConfigAsync\n} from '@wfh/plink/wfh/dist';\nimport {initConfig, initProcess, prepareLazyNodeInjector} from '@wfh/plink/wfh/dist';\nimport * as puppeteer from './puppeteer';\n\nconst cliExt: CliExtension = (program, withGlobalOptions) => {\n  const cmdLogin = program.command('jira-login')\n  .description('Login JIRA and save browser cache')\n  .action(async (file: string) => {\n    initConfig(cmdSync.opts() as GlobalOptions);\n    initProcess();\n    (require('@wfh/plink/wfh/dist').prepareLazyNodeInjector as typeof prepareLazyNodeInjector)();\n    (await import('./jira')).login();\n  });\n  withGlobalOptions(cmdLogin);\n\n\n  const cmdSync = program.command('jira-sync [yaml-file]')\n  .description('Read YAML file and create new tasks in JIRA')\n  .option('--headless', 'use headless puppeteer')\n  .action(async (file: string) => {\n    initConfig(cmdSync.opts() as GlobalOptions);\n    initProcess();\n    (require('@wfh/plink/wfh/dist').prepareLazyNodeInjector as typeof prepareLazyNodeInjector)();\n    if (cmdSync.opts().headless) {\n      (require('./puppeteer') as typeof puppeteer).setUseHeadless(true);\n    }\n    (await import('./jira')).sync({headless: cmdSync.opts().headless}, file);\n  });\n  withGlobalOptions(cmdSync);\n\n  const cmdList = program.command('jira-list-story [URL]')\n  .description('Fetch JIRA stories from remote server list page [URL],' +\n    'default: https://issue.bkjk-inc.com/issues/?filter=14118')\n  .option('--include <issue-prefix>', 'Only include issues with specific ID prefix')\n  .option('--include-version <version>', 'Only inlucde issue with specific version')\n  .option('--headless', 'use headless puppeteer')\n  .action(async (url: string) => {\n    initConfig(cmdList.opts() as GlobalOptions);\n    initProcess();\n    (require('@wfh/plink/wfh/dist').prepareLazyNodeInjector as typeof prepareLazyNodeInjector)();\n    if (cmdList.opts().headless) {\n      (require('./puppeteer') as typeof puppeteer).setUseHeadless(true);\n    }\n    (await import('./jira')).listStory(cmdList.opts(), url);\n  });\n  withGlobalOptions(cmdList);\n};\n\nexport default cliExt;\n"]}