{"version":3,"sources":["cli.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAEA,8CAAqF;AAGrF,MAAM,MAAM,GAAiB,CAAC,OAAO,EAAE,iBAAiB,EAAE,EAAE;IAC1D,MAAM,OAAO,GAAG,OAAO,CAAC,OAAO,CAAC,uBAAuB,CAAC;SACvD,WAAW,CAAC,6CAA6C,CAAC;SAC1D,MAAM,CAAC,YAAY,EAAE,wBAAwB,CAAC;SAC9C,MAAM,CAAC,CAAO,IAAY,EAAE,EAAE;QAC7B,iBAAU,CAAC,OAAO,CAAC,IAAI,EAAmB,CAAC,CAAC;QAC5C,kBAAW,EAAE,CAAC;QACb,OAAO,CAAC,qBAAqB,CAAC,CAAC,uBAA0D,EAAE,CAAC;QAC7F,IAAI,OAAO,CAAC,IAAI,EAAE,CAAC,QAAQ,EAAE;YAC1B,OAAO,CAAC,aAAa,CAAsB,CAAC,cAAc,CAAC,IAAI,CAAC,CAAC;SACnE;QACD,CAAC,wDAAa,QAAQ,GAAC,CAAC,CAAC,IAAI,CAAC,EAAC,QAAQ,EAAE,OAAO,CAAC,IAAI,EAAE,CAAC,QAAQ,EAAC,EAAE,IAAI,CAAC,CAAC;IAC3E,CAAC,CAAA,CAAC,CAAC;IACH,iBAAiB,CAAC,OAAO,CAAC,CAAC;IAE3B,MAAM,OAAO,GAAG,OAAO,CAAC,OAAO,CAAC,iBAAiB,CAAC;SACjD,WAAW,CAAC,uCAAuC,CAAC;SACpD,MAAM,CAAC,YAAY,EAAE,wBAAwB,CAAC;SAC9C,MAAM,CAAC,CAAO,IAAY,EAAE,EAAE;QAC7B,iBAAU,CAAC,OAAO,CAAC,IAAI,EAAmB,CAAC,CAAC;QAC5C,kBAAW,EAAE,CAAC;QACb,OAAO,CAAC,qBAAqB,CAAC,CAAC,uBAA0D,EAAE,CAAC;QAC7F,IAAI,OAAO,CAAC,IAAI,EAAE,CAAC,QAAQ,EAAE;YAC1B,OAAO,CAAC,aAAa,CAAsB,CAAC,cAAc,CAAC,IAAI,CAAC,CAAC;SACnE;QACD,CAAC,wDAAa,QAAQ,GAAC,CAAC,CAAC,SAAS,EAAE,CAAC;IACvC,CAAC,CAAA,CAAC,CAAC;IACH,iBAAiB,CAAC,OAAO,CAAC,CAAC;AAC7B,CAAC,CAAC;AAEF,kBAAe,MAAM,CAAC","file":"cli.js","sourcesContent":["import {CliExtension , GlobalOptions // , initConfigAsync\n} from '@wfh/plink/wfh/dist';\nimport {initConfig, initProcess, prepareLazyNodeInjector} from '@wfh/plink/wfh/dist';\nimport * as puppeteer from './puppeteer';\n\nconst cliExt: CliExtension = (program, withGlobalOptions) => {\n  const cmdSync = program.command('jira-sync [yaml-file]')\n  .description('Read YAML file and create new tasks in JIRA')\n  .option('--headless', 'use headless puppeteer')\n  .action(async (file: string) => {\n    initConfig(cmdSync.opts() as GlobalOptions);\n    initProcess();\n    (require('@wfh/plink/wfh/dist').prepareLazyNodeInjector as typeof prepareLazyNodeInjector)();\n    if (cmdSync.opts().headless) {\n      (require('./puppeteer') as typeof puppeteer).setUseHeadless(true);\n    }\n    (await import('./jira')).sync({headless: cmdSync.opts().headless}, file);\n  });\n  withGlobalOptions(cmdSync);\n\n  const cmdList = program.command('jira-list-story')\n  .description('Fetch JIRA stories from remote server')\n  .option('--headless', 'use headless puppeteer')\n  .action(async (file: string) => {\n    initConfig(cmdList.opts() as GlobalOptions);\n    initProcess();\n    (require('@wfh/plink/wfh/dist').prepareLazyNodeInjector as typeof prepareLazyNodeInjector)();\n    if (cmdList.opts().headless) {\n      (require('./puppeteer') as typeof puppeteer).setUseHeadless(true);\n    }\n    (await import('./jira')).listStory();\n  });\n  withGlobalOptions(cmdList);\n};\n\nexport default cliExt;\n"]}